version: "3.8"

services:
  # PostgreSQL Database (for local development fallback)
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-talkar_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD not set}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Supabase (for local development)
  supabase:
    image: supabase/supabase:latest
    ports:
      - "54321:5432" # Supabase PostgreSQL
      - "8000:8000" # Supabase API
      - "8001:8001" # Supabase Studio
    environment:
      - POSTGRES_DB=${SUPABASE_POSTGRES_DB:-postgres}
      - POSTGRES_USER=${SUPABASE_POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${SUPABASE_POSTGRES_PASSWORD:?SUPABASE_POSTGRES_PASSWORD not set}
      - JWT_SECRET=${SUPABASE_JWT_SECRET:?SUPABASE_JWT_SECRET not set}
      - ANON_KEY=${SUPABASE_ANON_KEY:?SUPABASE_ANON_KEY not set}
      - SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY:?SUPABASE_SERVICE_ROLE_KEY not set}
    volumes:
      - supabase_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build: ./backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-talkar_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:?DB_PASSWORD not set}
      - JWT_SECRET=${JWT_SECRET:?JWT_SECRET not set}
      - SUPABASE_URL=${SUPABASE_URL:-http://supabase:8000}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY:?SUPABASE_ANON_KEY not set}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_ROLE_KEY:?SUPABASE_SERVICE_ROLE_KEY not set}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:?AWS_ACCESS_KEY_ID not set}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:?AWS_SECRET_ACCESS_KEY not set}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:-talkar-assets}
      - SYNC_API_URL=${SYNC_API_URL:-https://api.sync.com/v1}
      - SYNC_API_KEY=${SYNC_API_KEY:?SYNC_API_KEY not set}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3001}
    depends_on:
      postgres:
        condition: service_healthy
      supabase:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules

  # Admin Dashboard
  admin-dashboard:
    build: ./admin-dashboard
    ports:
      - "3001:3000"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:3000/api/v1}
      - REACT_APP_SUPABASE_URL=${REACT_APP_SUPABASE_URL:-http://localhost:8000}
      - REACT_APP_SUPABASE_ANON_KEY=${REACT_APP_SUPABASE_ANON_KEY:?REACT_APP_SUPABASE_ANON_KEY not set}
    depends_on:
      - backend
      - supabase
    volumes:
      - ./admin-dashboard:/app
      - /app/node_modules

  # Supabase Studio (Web Interface)
  supabase-studio:
    image: supabase/studio:latest
    ports:
      - "3002:3000"
    environment:
      - STUDIO_PG_META_URL=${STUDIO_PG_META_URL:-http://supabase:8000}
      - POSTGRES_PASSWORD=${SUPABASE_POSTGRES_PASSWORD:?SUPABASE_POSTGRES_PASSWORD not set}
    depends_on:
      - supabase

volumes:
  postgres_data:
  supabase_data:
